const joi = require('joi');

<% for (var i = 0; i < abi.length; i++) {%><% var item = abi[i] %><%if (item.type == 'function') {%>
/**<% if (item.constant == true) {%>
 * This is a get function<%} else {%>
 * This is a post function<%}%><% if (item.inputs.length == 0 && item.constant == true) {%>
 * @param empty<%} else {%><% for (var j = 0; j < item.inputs.length; j++){%>
 * @param {<%=item.inputs[j].type%>} <% if (item.inputs[j].name == '') {%>_arg<%=j%><%} else {%><%=item.inputs[j].name%><%} %> <%}%><%} %><% if (item.constant == false) {%>
 * @param {address} _from<%} %>
 */
module.exports.<%=item.name%> = function <%=item.name%>(<% for (var k = 0; k < item.inputs.length; k++) {%><% if (k > 0) {%>, <%} %><% if (item.inputs[k].name == '') {%>_arg<%=k%><%} else {%><%=item.inputs[k].name%><%}%><%} %><% if (item.constant == false){%><% if (item.inputs.length > 0) {%>, <%} %>_from<%} %>) {
  const schema = joi.object().keys({<% for (var k = 0; k < item.inputs.length; k++) { %>
    <% if (item.inputs[k].name == '') {%> _arg<%=k%>:<% if (item.inputs[k].type == 'string' || item.inputs[k].type == 'bytes32'){%>joi.string()<%} else if (item.inputs[k].type == 'int' || item.inputs[k].type == 'int256' || item.inputs[k].type == 'uint256' || item.inputs[k].type == 'uint') {%>joi.number()<%} else if (item.inputs[k].type == 'address') { %>joi.string().regex(/^(0x)?[0-9a-fA-F]{40}$/)<%} else if (item.inputs[k].type == 'bool') {%>joi.boolean()<%} else if (item.inputs[k].type == 'uint256[]' || item.inputs[k].type == 'uint[]' || item.inputs[k].type == 'int[]' || item.inputs[k].type == 'int256[]') {%>joi.array().items(joi.number())<%} else if (item.inputs[k].type == 'string[]' || item.inputs[k].type == 'bytes32[]') {%>joi.array().items(joi.string())<%} else if (item.inputs[k].type == 'bool[]') {%>joi.array().items(joi.boolean())<%} else if (item.inputs[k].type == 'address[]') {%>joi.array().items(joi.string().regex(/^(0x)?[0-9a-fA-F]{40}$/))<%} %>
    <%} else { %><%=item.inputs[k].name%>: <% if (item.inputs[k].type == 'string' || item.inputs[k].type == 'bytes32'){%>joi.string()<%} else if (item.inputs[k].type == 'int' || item.inputs[k].type == 'int256' || item.inputs[k].type == 'uint256' || item.inputs[k].type == 'uint') {%>joi.number()<%} else if (item.inputs[k].type == 'address') { %>joi.string().regex(/^(0x)?[0-9a-fA-F]{40}$/)<%} else if (item.inputs[k].type == 'bool') {%>joi.boolean()<%} else if (item.inputs[k].type == 'uint256[]' || item.inputs[k].type == 'uint[]' || item.inputs[k].type == 'int[]' || item.inputs[k].type == 'int256[]') {%>joi.array().items(joi.number())<%} else if (item.inputs[k].type == 'string[]' || item.inputs[k].type == 'bytes32[]') {%>joi.array().items(joi.string())<%} else if (item.inputs[k].type == 'bool[]') {%>joi.array().items(joi.boolean())<%} else if (item.inputs[k].type == 'address[]') {%>joi.array().items(joi.string().regex(/^(0x)?[0-9a-fA-F]{40}$/))<%} %><%} %><% if (k < item.inputs.length - 1) {%>,<%} %><% } %>
  })
  return joi.validate({<% for (var k = 0; k < item.inputs.length; k++) {%><% if (k > 0) {%>, <%} %><% if (item.inputs[k].name == '') {%>_arg<%=k%><%} else {%><%=item.inputs[k].name%><%}%><%} %>}, schema)
}
<%}%><%}%>
